/* Autogenerated file, do not edit! */
/* eslint-disable */
import { ContractBase, DeployMethod } from '@aztec/aztec.js';
import { Point } from '@aztec/foundation/fields';
import TokenBridgeContractAbiJson from '../../aztec-contracts/token_bridge/target/TokenBridge.json' assert { type: 'json' };
export const TokenBridgeContractAbi = TokenBridgeContractAbiJson;
/**
 * Type-safe interface for contract TokenBridge;
 */
export class TokenBridgeContract extends ContractBase {
    constructor(
    /** The deployed contract's complete address. */
    completeAddress, 
    /** The wallet. */
    wallet) {
        super(completeAddress, TokenBridgeContractAbi, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(
    /** The deployed contract's address. */
    address, 
    /** The wallet. */
    wallet) {
        const extendedContractData = await wallet.getExtendedContractData(address);
        if (extendedContractData === undefined) {
            throw new Error('Contract ' + address.toString() + ' is not deployed');
        }
        return new TokenBridgeContract(extendedContractData.getCompleteAddress(), wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(rpc) {
        return new DeployMethod(Point.ZERO, rpc, TokenBridgeContractAbi, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(rpc, publicKey) {
        return new DeployMethod(publicKey, rpc, TokenBridgeContractAbi, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's ABI.
     */
    static get abi() {
        return TokenBridgeContractAbi;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5CcmlkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9wYWNrYWdlcy9zcmMvdXRpbHMvVG9rZW5CcmlkZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0Esc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBQWlDLFlBQVksRUFBK0MsWUFBWSxFQUFxQixNQUFNLGlCQUFpQixDQUFDO0FBQzVKLE9BQU8sRUFBTSxLQUFLLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUdyRCxPQUFPLDBCQUEwQixNQUFNLDREQUE0RCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBQzVILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUFHLDBCQUF5QyxDQUFDO0FBRWhGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFvQixTQUFRLFlBQVk7SUFFbkQ7SUFDRSxnREFBZ0Q7SUFDaEQsZUFBZ0M7SUFDaEMsa0JBQWtCO0lBQ2xCLE1BQWM7UUFFZCxLQUFLLENBQUMsZUFBZSxFQUFFLHNCQUFzQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFJRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtJQUNwQix1Q0FBdUM7SUFDdkMsT0FBcUI7SUFDckIsa0JBQWtCO0lBQ2xCLE1BQWM7UUFFZCxNQUFNLG9CQUFvQixHQUFHLE1BQU0sTUFBTSxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzNFLElBQUksb0JBQW9CLEtBQUssU0FBUyxFQUFFO1lBQ3RDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsT0FBTyxJQUFJLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEYsQ0FBQztJQUdEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFRO1FBQzNCLE9BQU8sSUFBSSxZQUFZLENBQXNCLEtBQUssQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEgsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQVEsRUFBRSxTQUFvQjtRQUM5RCxPQUFPLElBQUksWUFBWSxDQUFzQixTQUFTLEVBQUUsR0FBRyxFQUFFLHNCQUFzQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkgsQ0FBQztJQUlEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLEdBQUc7UUFDbkIsT0FBTyxzQkFBc0IsQ0FBQztJQUNoQyxDQUFDO0NBaUNGIn0=